# Makefile for gnattools
#   Copyright 2003, 2004, 2009, 2010 Free Software Foundation, Inc.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Default target; must be first.
all: gnattools

# Standard autoconf-set variables.
SHELL = @SHELL@
srcdir = @srcdir@
libdir = @libdir@
build = @build@
target = @target@
host = @host@
host_alias = @host_alias@
prefix = @prefix@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

# Nonstandard autoconf-set variables.
LN_S=@LN_S@
target_noncanonical=@target_noncanonical@

# Variables for the user (or the top level) to override.
exeext = @EXEEXT@
objext=.o
TRACE=no
ADA_FOR_BUILD=
ADA_FOR_TARGET=
LDFLAGS=
PWD_COMMAND = $${PWDCMD-pwd}

# The tedious process of getting CFLAGS right.
CFLAGS=-g
GCC_WARN_CFLAGS = -W -Wall
WARN_CFLAGS = @warn_cflags@

ADA_CFLAGS=@ADA_CFLAGS@

# Variables for gnattools.
ADAFLAGS= -gnatn

# For finding the GCC build dir, which is used far too much
GCC_DIR=../gcc

# Full path to top source directory
ftop_srcdir := $(shell cd $(srcdir)/..;${PWD_COMMAND})

# Absolute srcdir for gcc (why do we want absolute?  I dunno)
fsrcdir := $(shell cd $(srcdir)/../gcc/; ${PWD_COMMAND})

# Useful "subroutines" for the excess includes
INCLUDES_FOR_SUBDIR = -iquote . -iquote .. -iquote ../.. \
		      -iquote $(fsrcdir)/ada -iquote $(fsrcdir)/config \
		      -iquote $(fsrcdir) -I$(ftop_srcdir)/include
ADA_INCLUDES_FOR_SUBDIR = -I. -I$(fsrcdir)/ada

CXX_LFLAGS = \
 -B../$(target_noncanonical)/libstdc++-v3/src/.libs \
 -B../$(target_noncanonical)/libstdc++-v3/libsupc++/.libs \
 -L../$(target_noncanonical)/libstdc++-v3/src/.libs \
 -L../$(target_noncanonical)/libstdc++-v3/libsupc++/.libs \
 -L../$(target_noncanonical)/libatomic/.libs

CFLAGS=-O2 -Wall
ADA_CFLAGS=-O2 -gnatn
ADA_INCLUDES=-nostdinc -I- -I. -I../gcc/ada/rts \
     -I../$(target_noncanonical)/libgnatvsn -I../$(target_noncanonical)/libgnatprj
LIB_VERSION=$(strip $(shell grep ' Library_Version :' \
              ../$(target_noncanonical)/libgnatvsn/gnatvsn.ads | sed -e 's/.*"\(.*\)".*/\1/'))
SHARED_ADA_LIBS := -L../gcc/ada/rts -lgnat-$(LIB_VERSION)
SHARED_ADA_LIBS += -L../$(target_noncanonical)/libgnatvsn -lgnatvsn
SHARED_ADA_LIBS += -L../$(target_noncanonical)/libgnatprj -lgnatprj
STATIC_ADA_LIBS := ../gcc/ada/rts/libgnat.a
STATIC_GCC_LIBS := ../gcc/libcommon-target.a ../gcc/libcommon.a ../libcpp/libcpp.a \
../libbacktrace/.libs/libbacktrace.a ../libiberty/libiberty.a

# We will use the just-built compiler to compile and link everything.
GCC=../gcc/xgcc -B../gcc/ -no-pie
GXX=../gcc/xg++ -B../gcc/ -no-pie

# File lists
# ----------

# File associations set by configure
EXTRA_GNATTOOLS = @EXTRA_GNATTOOLS@
TOOLS_TARGET_PAIRS = @TOOLS_TARGET_PAIRS@

# Stage 1 builds xgcc and gnatbind; we can use them to build
# gnatmake-static and gnatlink-static, then use gnatmake-static and
# gnatlink-static to build the other tools.  The reason we first build
# statically-linked versions of gnatmake and gnatlink is so we can run
# them with confidence on all build platforms, without LD_LIBRARY_PATH
# or some such variable.

# The tools we will build using gnatmake-static and gnatlink-static.
TOOLS := gnat gnatbind gnatchop gnatclean gnatfind gnatkr gnatls gnatlink
TOOLS += gnatmake gnatname gnatprep gnatxref

# Since we don't have gnatmake, we must specify the full list of
# object files necessary to build gnatmake and gnatlink.
GNATLINK_OBJS = \
gnatlink.o \
indepsw.o \
validsw.o \
link.o

GNATMAKE_OBJS = \
aspects.o \
errout.o \
fname-sf.o \
gnatmake.o \
make.o \
makeusg.o \
mlib-prj.o \
osint-m.o \
restrict.o \
sem_aux.o \
usage.o \
validsw.o \
link.o \
$(EXTRA_GNATMAKE_OBJS)

EXTRA_TOOLS_OBJS = \
bcheck.o \
binde.o \
bindgen.o \
bindusg.o \
clean.o \
gprep.o \
makegpr.o \
osint-b.o \
osint-l.o \
prep.o \
prj-makr.o \
prj-pp.o \
switch-b.o \
vms_cmds.o \
vms_conv.o \
vms_data.o \
xr_tabls.o \
xref_lib.o

OBJECTS = $(GNATLINK_OBJS) $(GNATMAKE_OBJS) $(EXTRA_TOOLS_OBJS)

# Makefile targets
# ----------------

.PHONY: gnattools gnattools-native gnattools-cross regnattools
gnattools: @default_gnattools_target@

BODIES := $(foreach f,$(OBJECTS),$(wildcard $(patsubst %.o,@srcdir@/../gcc/ada/%.adb,$(f))))
SPECS  := $(foreach f,$(OBJECTS),$(wildcard $(patsubst %.o,@srcdir@/../gcc/ada/%.ads,$(f))))

$(notdir $(SPECS) $(BODIES)): stamp-gnattools-sources

stamp-gnattools-sources:
	for file in $(BODIES) $(SPECS); do \
	   $(LN_S) -f $$file .; \
	done
	rm -f sdefault.adb; $(LN_S) ../gcc/ada/sdefault.adb .
	$(foreach PAIR,$(TOOLS_TARGET_PAIRS), \
	          rm -f $(word 1,$(subst <, ,$(PAIR)));\
	          $(LN_S) @srcdir@/../gcc/ada/$(word 2,$(subst <, ,$(PAIR))) \
	                  $(word 1,$(subst <, ,$(PAIR)));)
	touch $@

gnattools-native: ../gcc/ada/rts/libgnat-$(LIB_VERSION).so
gnattools-native: ../$(target_noncanonical)/libgnatvsn/libgnatvsn.so
gnattools-native: stamp-gnattools-sources
gnattools-native: $(TOOLS)
	cp -lpf $(TOOLS) ../gcc

$(TOOLS) gnatcmd: | gnatmake-static gnatlink-static

vpath %.c @srcdir@/../gcc/ada:@srcdir@/../gcc
vpath %.h @srcdir@/../gcc/ada

# gnatlink

gnatlink-static: $(GNATLINK_OBJS) b_gnatl.o
	$(GXX) -o $@ $^ \
	  ../$(target_noncanonical)/libgnatprj/libgnatprj.a \
	  ../$(target_noncanonical)/libgnatvsn/libgnatvsn.a \
	  ../gcc/ada/rts/libgnat.a $(STATIC_GCC_LIBS) $(CXX_LFLAGS) $(LDFLAGS)

gnatlink: $(GNATLINK_OBJS) b_gnatl.o
	$(GXX) -o $@ $^ $(SHARED_ADA_LIBS) $(STATIC_GCC_LIBS) $(CXX_LFLAGS) $(LDFLAGS)

b_gnatl.adb: $(GNATLINK_OBJS)
	../gcc/gnatbind -o $@ $(ADA_INCLUDES) gnatlink.ali

# gnatmake

gnatmake-static: $(GNATMAKE_OBJS) b_gnatm.o
	$(GXX) -o $@ $(ADA_CFLAGS) $^ \
	  ../$(target_noncanonical)/libgnatprj/libgnatprj.a \
	  ../$(target_noncanonical)/libgnatvsn/libgnatvsn.a \
	  $(STATIC_ADA_LIBS) $(STATIC_GCC_LIBS) $(CXX_LFLAGS) $(LDFLAGS)

gnatmake: $(GNATMAKE_OBJS) b_gnatm.o
	$(GXX) -o $@ $(ADA_CFLAGS) $^ $(SHARED_ADA_LIBS) $(STATIC_GCC_LIBS) $(CXX_LFLAGS) $(LDFLAGS)

b_gnatm.adb: $(GNATMAKE_OBJS)
	../gcc/gnatbind -o $@ $(ADA_INCLUDES) gnatmake.ali

# Other tools
gnat: gnatcmd
	cp -lp $< $@

gnatbind gnatchop gnatclean gnatcmd gnatfind gnatkr gnatls gnatname gnatprep \
gnatxref: link.o
	if [ ! -f $@.adb ] ; then $(LN_S) ../../src/gcc/ada/$@.ad[bs] .; fi
	./gnatmake-static -c -b $@ $(ADA_CFLAGS) $(ADA_INCLUDES) \
	   --GCC="$(GCC)" \
	   --GNATBIND=../gcc/gnatbind
	./gnatlink-static -o $@ $@.ali $^ \
	   $(ADA_INCLUDES) $(SHARED_ADA_LIBS) $(STATIC_GCC_LIBS) $(CXX_LFLAGS) $(LDFLAGS) \
	   --GCC="$(GXX) $(ADA_INCLUDES)"


# Variables for regnattools
TOOLS_FLAGS_TO_PASS_RE= \
	"CC=../../xgcc -B../../" \
	"CXX=../../xg++ -B../../ $(CXX_LFLAGS)" \
	"CFLAGS=$(CFLAGS)" \
	"LDFLAGS=$(LDFLAGS)" \
	"ADAFLAGS=$(ADAFLAGS)" \
	"ADA_CFLAGS=$(ADA_CFLAGS)" \
	"INCLUDES=$(INCLUDES_FOR_SUBDIR)" \
	"ADA_INCLUDES=-I../rts $(ADA_INCLUDES_FOR_SUBDIR)"\
	"exeext=$(exeext)" \
	"fsrcdir=$(fsrcdir)" \
	"srcdir=$(fsrcdir)" \
	"GNATMAKE=../../gnatmake" \
	"GNATLINK=../../gnatlink" \
	"GNATBIND=../../gnatbind" \
	"TOOLSCASE=cross"

# Variables for gnattools, cross
ifeq ($(build), $(host))
  GNATMAKE_FOR_HOST=gnatmake
  GNATLINK_FOR_HOST=gnatlink
  GNATBIND_FOR_HOST=gnatbind
  GNATLS_FOR_HOST=gnatls
else
  GNATMAKE_FOR_HOST=$(host_alias)-gnatmake
  GNATLINK_FOR_HOST=$(host_alias)-gnatlink
  GNATBIND_FOR_HOST=$(host_alias)-gnatbind
  GNATLS_FOR_HOST=$(host_alias)-gnatls
endif

# Put the host RTS dir first in the PATH to hide the default runtime
# files that are among the sources
RTS_DIR:=$(strip $(subst \,/,$(shell $(GNATLS_FOR_HOST) -v | grep adalib )))

TOOLS_FLAGS_TO_PASS_CROSS= \
	"CC=$(CC)" \
	"CXX=$(CXX)" \
	"CFLAGS=$(CFLAGS) $(WARN_CFLAGS)" \
	"LDFLAGS=$(LDFLAGS)" \
	"ADAFLAGS=$(ADAFLAGS)"	\
	"ADA_CFLAGS=$(ADA_CFLAGS)" \
	"INCLUDES=$(INCLUDES_FOR_SUBDIR)" \
	"ADA_INCLUDES=-I$(RTS_DIR)/../adainclude -I$(RTS_DIR) $(ADA_INCLUDES_FOR_SUBDIR)" \
	"exeext=$(exeext)" \
	"fsrcdir=$(fsrcdir)" \
	"srcdir=$(fsrcdir)" \
	"GNATMAKE=$(GNATMAKE_FOR_HOST)" \
	"GNATLINK=$(GNATLINK_FOR_HOST)" \
	"GNATBIND=$(GNATBIND_FOR_HOST)" \
	"TOOLSCASE=cross" \
	"LIBGNAT="

# File lists
# ----------

# File associations set by configure
EXTRA_GNATTOOLS = @EXTRA_GNATTOOLS@
TOOLS_TARGET_PAIRS = @TOOLS_TARGET_PAIRS@

# Makefile targets
# ----------------

.PHONY: gnattools gnattools-native gnattools-cross regnattools
gnattools: @default_gnattools_target@

# Sanity check
$(GCC_DIR)/stamp-gnatlib-rts:
	@if [ ! -f $(GCC_DIR)/stamp-gnatlib-rts ] ; \
        then \
          echo "Cannot build gnattools while gnatlib is out of date or unbuilt" ; \
          false; \
        else \
          true; \
        fi


# Build directory for the tools. Let's copy the target-dependent
# sources using the same mechanism as for gnatlib. The other sources are
# accessed using the vpath directive in ada/Makefile.in

$(GCC_DIR)/stamp-tools:
	-rm -rf $(GCC_DIR)/ada/tools
	-mkdir -p $(GCC_DIR)/ada/tools
	-(cd $(GCC_DIR)/ada/tools; $(LN_S) ../sdefault.adb ../snames.ads ../snames.adb .)
	-$(foreach PAIR,$(TOOLS_TARGET_PAIRS), \
	          rm -f $(GCC_DIR)/ada/tools/$(word 1,$(subst <, ,$(PAIR)));\
	          $(LN_S) $(fsrcdir)/ada/$(word 2,$(subst <, ,$(PAIR))) \
	                $(GCC_DIR)/ada/tools/$(word 1,$(subst <, ,$(PAIR)));)
	touch $(GCC_DIR)/stamp-tools

%.o: %.adb
	$(GCC) -c -o $@ $< $(ADA_CFLAGS) $(ADA_INCLUDES)

%.o: %.ads
	$(GCC) -c -o $@ $< $(ADA_CFLAGS) $(ADA_INCLUDES)


# gnatmake/link can be built with recent gnatmake/link if they are available.
# This is especially convenient for building cross tools or for rebuilding
# the tools when the original bootstrap has already be done.
regnattools: $(GCC_DIR)/stamp-gnatlib-rts
	# gnattools1-re
	$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \
	  $(TOOLS_FLAGS_TO_PASS_RE) INCLUDES="" \
	  gnatmake-re gnatlink-re
	# gnattools2
	$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \
	  $(TOOLS_FLAGS_TO_PASS_NATIVE) common-tools

gnattools-cross: $(GCC_DIR)/stamp-tools
	# gnattools1-re
	$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \
	  $(TOOLS_FLAGS_TO_PASS_CROSS) INCLUDES="" \
	  gnatmake-re gnatlink-re
	# gnattools2
	$(MAKE) -C $(GCC_DIR)/ada/tools -f ../Makefile \
	  $(TOOLS_FLAGS_TO_PASS_CROSS) common-tools
	# Rename cross tools to where the GCC makefile wants them when
	# installing.  FIXME: installation should be done elsewhere.
	if [ -f $(GCC_DIR)/gnatbind$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatbind$(exeext) $(GCC_DIR)/gnatbind-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatchop$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatchop$(exeext) $(GCC_DIR)/gnatchop-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnat$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnat$(exeext) $(GCC_DIR)/gnat-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatkr$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatkr$(exeext) $(GCC_DIR)/gnatkr-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatlink$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatlink$(exeext) $(GCC_DIR)/gnatlink-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatls$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatls$(exeext) $(GCC_DIR)/gnatls-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatmake$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatmake$(exeext) $(GCC_DIR)/gnatmake-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatmem$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatmem$(exeext) $(GCC_DIR)/gnatmem-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatname$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatname$(exeext) $(GCC_DIR)/gnatname-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatprep$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatprep$(exeext) $(GCC_DIR)/gnatprep-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatxref$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatxref$(exeext) $(GCC_DIR)/gnatxref-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatfind$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatfind$(exeext) $(GCC_DIR)/gnatfind-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatclean$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatclean$(exeext) $(GCC_DIR)/gnatclean-cross$(exeext); \
	fi
	if [ -f $(GCC_DIR)/gnatsym$(exeext) ] ; then \
	  mv $(GCC_DIR)/gnatsym$(exeext) $(GCC_DIR)/gnatsym-cross$(exeext); \
	fi

# Other
# -----

# Check uninstalled version.
check:

# Check installed version.
installcheck:

# Build info (none here).
info:

# Build DVI (none here).
dvi:

# Build PDF (none here).
pdf:

# Build HTML (none here).
html:

.PHONY: check installcheck info dvi pdf html

# Build TAGS (none here).
TAGS:

# Installation rules.
install:

install-strip: install

install-info:

install-pdf:

install-html:

.PHONY: install install-strip install-info install-pdf install-html

# Cleaning rules.
mostlyclean:

clean:

distclean:
	$(RM) Makefile config.status config.log config.cache

maintainer-clean:

.PHONY: mostlyclean clean distclean maintainer-clean

# Rules for rebuilding this Makefile.
Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=$@ ; \
	CONFIG_HEADERS= ; \
	$(SHELL) ./config.status

config.status: $(srcdir)/configure
	$(SHELL) ./config.status --recheck

AUTOCONF = autoconf
configure_deps = \
	$(srcdir)/configure.ac \
	$(srcdir)/../config/acx.m4 \
	$(srcdir)/../config/override.m4

$(srcdir)/configure: @MAINT@ $(configure_deps)
	cd $(srcdir) && $(AUTOCONF)

# Don't export variables to the environment, in order to not confuse
# configure.
.NOEXPORT:

